generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           MemberRole       @default(ADMIN)
  account        Account[]
  session        Session[]
  Product        Product[]
  accountDetails AccountDetails[]
}

model AccountDetails {
  id                      String  @id @default(uuid())
  firstName               String
  lastName                String
  phoneNumber             String
  landlineTelephoneNumber String?
  country                 String
  currency                String
  TimeZone                String
  address1                String
  address2                String?
  city                    String
  govOrRegion             String?
  postalCode              Int?
  displayLang             String?
  commercialRecord        String?
  taxCard                 String?
  logo                    String?
  userId                  String
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String?
  price          Int
  dealerPrice    Int?
  wholesalePrice Int?
  quantity       Int
  barcode        String?
  brandId        String
  brand          Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]
}

model Category {
  id             String           @id @default(uuid())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  products       Product[]
  brands         Brand[]
  additionalData AdditionalData[]
}

model AdditionalData {
  id         String    @id @default(uuid())
  label      String
  unit       String?
  value      String
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}
